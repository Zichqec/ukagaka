//Written by Zichqec https://ukagaka.zichqec.com/
//Function to loop images, like loading icons and gifs
/*
Arguments: (you'll probably only want a couple of these but i wanted OPTIONS ok)

0: image path. Omit the number and the extension
1: the number of the highest image in the loop. so if your last image is pic7.png, write 7
2: the number of times to loop the image, minimum is 1
3: The pause time between images. 1-9 will use the regular \w1, \w2, etc (these are n * 50 milliseconds). Higher than 9 will use \_w[], which is milliseconds
4: The extension of the image. .png is default, override it if you need to
5: The position of the image. Default is "inline", but you can set it to whatever - See Ukadoc's info on the \_b[] tag for details
6: Special options for the image. If you put a 1, it will use self alpha (just as a shortcut because it's a lot to type)
7: Whether or not to add leading 0s. Put a 1 if you don't want them. Leading 0s are used if you have numbers that go higher than 10, to make the numbers all the same length. So if you have more than 10 images, you would have 00, 01, 02... 10, 11, 12... etc. Without leading 0s, you get 0, 1, 2... 10, 11, 12... etc. If you want to force a single 0 at the start even though it's less than 10 (because... I do this lol), put a 2.
8: If your images start at 1 instead of 0, put a 1 here

So it'd look kinda like this: %(LoopImage('img\Moon',9,3,3,,,1,2,1))

*/
LoopImage
{
	//Just setting up some options and defaults
	_img = _argv[0]
	
	_num = TOINT(_argv[1])
	if _num < 1; _num = 1
	
	_loops = TOINT(_argv[2])
	if _loops < 1; _loops = 1
	
	_pause = TOINT(_argv[3])
	if _pause >= 10; _pause = "\_w[%(_pause)]"
	else; _pause = "\w%(_pause)"
	
	_ext = _argv[4]
	if _ext == ""; _ext = ".png"
	
	_pos = _argv[5]
	if _pos == ""; _pos = "inline"
	
	_opt = _argv[6]
	if _opt == 1; _opt = "--option=use_self_alpha"
	
	_add0 = 1
	if _argv[7] == 1; _add0 = 0
	elseif _argv[7] == 2; _add0 = 2
	
	_1index = 0
	if _argv[8] == 1; _1index = 1
	
	
	_output = ""
	
	//Main loop for the number of times to run the full set of images
	_i = 0
	while _i < _loops
	{
		//Run each image
		for _ii = _1index; _ii < _num; _ii++
		{
			_num_to_add = TOSTR(_ii)
			//Should take care of leading 0s?
			if _add0 >= 1
			{
				_str = TOSTR(_num)
				
				if STRLEN(_str) > 1
				{
					while STRLEN(_num_to_add) < STRLEN(_str)
					{
						_num_to_add = "0" + _num_to_add
					}
				}
				elseif _add0 == 2 //Because I'm a silly
				{
					_num_to_add = "0" + _num_to_add
				}
			}
			
			//Clear just the last image and not the whole balloon
			if _output != ""; _output += "\c[char,1]"
			
			_output += "\_b[%(_img)%(_num_to_add)%(_ext),%(_pos),%(_opt)]%(_pause)"
		}
		_i++
	}
	
	_output
}